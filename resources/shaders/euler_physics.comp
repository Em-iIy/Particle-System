#version 430 core

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	vec3	pos;
	vec3	dir;
};

layout (std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

layout (location = 0) uniform vec3 gravity1;
layout (location = 1) uniform float delta_time;
layout (location = 2) uniform float speed;
layout (location = 3) uniform vec3 gravity2;

const float	gravity1_mass = 2000.0f;
const float	gravity2_mass = 2000.0f;
const float	particle_mass = 1.0f;
const float particle_inverse_mass = 1.0f / particle_mass;

const float max_a = 300.0f;

vec3	calc_force(vec3 g_pos, float g_mass, vec3 p)
{
	vec3 d = g_pos - p;
	float dist = length(d);
	vec3 force = (g_mass / dist) * normalize(d);
	return (force);
}

void main()
{
	uint	index = gl_GlobalInvocationID.x;

	vec3	force = vec3(0.0f);
	force += calc_force(gravity1, gravity1_mass, particles[index].pos);
	force += calc_force(gravity2, gravity2_mass, particles[index].pos);

	float d_time = delta_time * speed;

	vec3	a = force * particle_inverse_mass;
	a = clamp(a,  -max_a, max_a);

	particles[index].pos += particles[index].dir * d_time + 0.5f * a * d_time * d_time;
	particles[index].dir += a * delta_time;
}
