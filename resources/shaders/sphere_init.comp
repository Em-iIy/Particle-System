#version 430 core

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	vec4	pos;
	vec4	dir;
};

layout (std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

layout (location = 0) uniform float radius;
layout (location = 1) uniform uint frame;

float	rand(float seed)
{
	return (fract(sin(seed) * 43758.5453123));
}

uint NextRandom(inout uint state)
{
	state = state * 747796405 + -1403630843;
	uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
	result = (result >> 22) ^ result;
	return result;
}

float RandomValue(inout uint state)
{
	return NextRandom(state) / 4294967295.0; // 2^32 - 1
}

// Random value in normal distribution (with mean=0 and sd=1)
float RandomValueNormalDistribution(inout uint state)
{
	// Thanks to https://stackoverflow.com/a/6178290
	float theta = 2 * 3.1415926 * RandomValue(state);
	float rho = sqrt(-2 * log(RandomValue(state)));
	return rho * cos(theta);
}

// Calculate a random direction
vec4 RandomDirection(inout uint state)
{
	// Thanks to https://math.stackexchange.com/a/1585996
	float x = RandomValueNormalDistribution(state);
	float y = RandomValueNormalDistribution(state);
	float z = RandomValueNormalDistribution(state);
	return (vec4(normalize(vec3(x, y, z)), 1.0));
}


vec4	random_point_on_sphere(inout uint state, float radius)
{
	float	u = RandomValueNormalDistribution(state);
	float	v = RandomValueNormalDistribution(state);

	float	theta = acos(2.0 * u - 1.0);
	float	phi = 2.0 * 3.1415926535 * v;

	float	x = radius * sin(theta) * cos(phi);
	float	y = radius * sin(theta) * sin(phi);
	float	z = radius * cos(theta);

	return (vec4(x, y, z, 1.0));
}

void main()
{
	uint	index = gl_GlobalInvocationID.x;
	// uint	state = index * 719393;
	uint	state = index + frame;
	if (state < 200000)
	{
		state += 172613;
	}
	// float	seed = float(index) * 0.01;

	// particles[index].pos = random_point_on_sphere(state, radius);
	particles[index].pos = RandomDirection(state) * 0.5;
	// particles[index].pos = vec4(0.0);
	particles[index].dir = vec4(0.0);
}