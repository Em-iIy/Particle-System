#version 430 core

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	vec3	pos;
	vec3	dir;
};

layout (std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};


layout (location = 0) uniform float	radius;
layout (location = 1) uniform float	dist;
layout (location = 2) uniform uint	frame;

uint NextRandom(inout uint state)
{
	state = state * 747796405 + -1403630843;
	uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
	result = (result >> 22) ^ result;
	return (result);
}

float RandomValue(inout uint state)
{
	return (NextRandom(state) / 4294967295.0); // 2^32 - 1
}

// Random value in normal distribution (with mean=0 and sd=1)
float RandomValueNormalDistribution(inout uint state)
{
	// Thanks to https://stackoverflow.com/a/6178290
	float theta = 2 * 3.1415926 * RandomValue(state);
	float rho = sqrt(-2 * log(RandomValue(state)));
	return (rho * cos(theta));
}

// Calculate a random direction
vec3 RandomDirection(inout uint state)
{
	// Thanks to https://math.stackexchange.com/a/1585996
	float x = RandomValueNormalDistribution(state);
	float y = RandomValueNormalDistribution(state);
	float z = RandomValueNormalDistribution(state);
	return (normalize(vec3(x, y, z)));
}

void main()
{
	uint	index = gl_GlobalInvocationID.x;
	uint	state = index + frame;
	if (state < 200000)
	{
		state += 172613;
	}

	particles[index].pos = RandomDirection(state) * radius + vec3(0.0, 0.0, -dist);
	particles[index].dir = vec3(0.0);
}
