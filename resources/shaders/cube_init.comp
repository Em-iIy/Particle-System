#version 430 core

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;

struct Particle {
	vec3	pos;
	vec3	dir;
};

layout (std430, binding = 0) buffer ParticleBuffer {
	Particle particles[];
};

layout (location = 0) uniform float radius;
layout (location = 1) uniform uint frame;

uint NextRandom(inout uint state)
{
	state = state * 747796405 + -1403630843;
	uint result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
	result = (result >> 22) ^ result;
	return (result);
}

float RandomValue(inout uint state)
{
	return ((NextRandom(state) / 4294967295.0) * 2.0 - 1.0); // 2^32 - 1
}


// Calculate a random direction
vec3 RandomDirection(inout uint state)
{
	float x = RandomValue(state);
	float y = RandomValue(state);
	float z = RandomValue(state);
	return (vec3(x, y, z));
}

vec3	point_on_cube(inout uint state)
{
	vec3 pos = RandomDirection(state);
	if (state % 3 == 0)
	{
		pos.x = sign(pos.x);
		// pos.yz = normalize(pos.yz);
	}
	else if (state % 3 == 1)
	{
		pos.y = sign(pos.y);
		// pos.xz = normalize(pos.xz);
	}
	else if (state % 3 == 2)
	{
		pos.z = sign(pos.z);
		// pos.xy = normalize(pos.xy);
	}
	return (pos);
}

void main()
{
	uint	index = gl_GlobalInvocationID.x;
	uint	state = index + frame;
	if (state < 200000)
	{
		state += 172613;
	}
	vec3 pos = point_on_cube(state);
	particles[index].pos = pos * radius + vec3(0.0, 0.0, -25.0);
	particles[index].dir = vec3(0.0);
}
